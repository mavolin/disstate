package event

// Code generated by tools/codegen/event. DO NOT EDIT.

import "github.com/diamondburned/arikawa/v3/gateway"

// generateEvent turns the passed source event into a wrapped event.
func (h *Handler) generateEvent(src interface{}) interface{} {
	base := NewBase()

	switch src := src.(type) {
	case *gateway.InvalidSessionEvent:
		return &InvalidSession{
			Base:                base,
			InvalidSessionEvent: src,
		}
	case *gateway.GuildMemberUpdateEvent:
		old, _ := h.astate.Cabinet.Member(src.GuildID, src.User.ID)
		return &GuildMemberUpdate{
			Base:                   base,
			GuildMemberUpdateEvent: src,
			Old:                    old,
		}
	case *gateway.GuildMembersChunkEvent:
		return &GuildMembersChunk{
			Base:                   base,
			GuildMembersChunkEvent: src,
		}
	case *gateway.PresenceUpdateEvent:
		old, _ := h.astate.Cabinet.Presence(src.GuildID, src.User.ID)
		return &PresenceUpdate{
			Base:                base,
			PresenceUpdateEvent: src,
			Old:                 old,
		}
	case *gateway.WebhooksUpdateEvent:
		return &WebhooksUpdate{
			Base:                base,
			WebhooksUpdateEvent: src,
		}
	case *gateway.ApplicationCommandUpdateEvent:
		return &ApplicationCommandUpdate{
			Base:                          base,
			ApplicationCommandUpdateEvent: src,
		}
	case *gateway.ChannelDeleteEvent:
		old, _ := h.astate.Cabinet.Channel(src.ID)
		return &ChannelDelete{
			Base:               base,
			ChannelDeleteEvent: src,
			Old:                old,
		}
	case *gateway.GuildUpdateEvent:
		old, _ := h.astate.Cabinet.Guild(src.ID)
		return &GuildUpdate{
			Base:             base,
			GuildUpdateEvent: src,
			Old:              old,
		}
	case *gateway.GuildBanRemoveEvent:
		return &GuildBanRemove{
			Base:                base,
			GuildBanRemoveEvent: src,
		}
	case *gateway.MessageUpdateEvent:
		old, _ := h.astate.Cabinet.Message(src.ChannelID, src.ID)
		return &MessageUpdate{
			Base:               base,
			MessageUpdateEvent: src,
			Old:                old,
		}
	case *gateway.MessageDeleteEvent:
		old, _ := h.astate.Cabinet.Message(src.ChannelID, src.ID)
		return &MessageDelete{
			Base:               base,
			MessageDeleteEvent: src,
			Old:                old,
		}
	case *gateway.MessageReactionRemoveEvent:
		return &MessageReactionRemove{
			Base:                       base,
			MessageReactionRemoveEvent: src,
		}
	case *gateway.RelationshipRemoveEvent:
		return &RelationshipRemove{
			Base:                    base,
			RelationshipRemoveEvent: src,
		}
	case *gateway.GuildCreateEvent:
		return &GuildCreate{
			Base:             base,
			GuildCreateEvent: src,
		}
	case *gateway.GuildDeleteEvent:
		old, _ := h.astate.Cabinet.Guild(src.ID)
		return &GuildDelete{
			Base:             base,
			GuildDeleteEvent: src,
			Old:              old,
		}
	case *gateway.GuildIntegrationsUpdateEvent:
		return &GuildIntegrationsUpdate{
			Base:                         base,
			GuildIntegrationsUpdateEvent: src,
		}
	case *gateway.GuildMemberAddEvent:
		return &GuildMemberAdd{
			Base:                base,
			GuildMemberAddEvent: src,
		}
	case *gateway.SessionsReplaceEvent:
		return &SessionsReplace{
			Base:                 base,
			SessionsReplaceEvent: src,
		}
	case *gateway.TypingStartEvent:
		return &TypingStart{
			Base:             base,
			TypingStartEvent: src,
		}
	case *gateway.ChannelUnreadUpdateEvent:
		return &ChannelUnreadUpdate{
			Base:                     base,
			ChannelUnreadUpdateEvent: src,
		}
	case *gateway.MessageAckEvent:
		return &MessageAck{
			Base:            base,
			MessageAckEvent: src,
		}
	case *gateway.UserSettingsUpdateEvent:
		return &UserSettingsUpdate{
			Base:                    base,
			UserSettingsUpdateEvent: src,
		}
	case *gateway.UserNoteUpdateEvent:
		return &UserNoteUpdate{
			Base:                base,
			UserNoteUpdateEvent: src,
		}
	case *gateway.PresencesReplaceEvent:
		return &PresencesReplace{
			Base:                  base,
			PresencesReplaceEvent: src,
		}
	case *gateway.ReadyEvent:
		return &Ready{
			Base:       base,
			ReadyEvent: src,
		}
	case *gateway.ChannelCreateEvent:
		return &ChannelCreate{
			Base:               base,
			ChannelCreateEvent: src,
		}
	case *gateway.ChannelPinsUpdateEvent:
		return &ChannelPinsUpdate{
			Base:                   base,
			ChannelPinsUpdateEvent: src,
		}
	case *gateway.GuildRoleCreateEvent:
		return &GuildRoleCreate{
			Base:                 base,
			GuildRoleCreateEvent: src,
		}
	case *gateway.GuildRoleDeleteEvent:
		old, _ := h.astate.Cabinet.Role(src.GuildID, src.RoleID)
		return &GuildRoleDelete{
			Base:                 base,
			GuildRoleDeleteEvent: src,
			Old:                  old,
		}
	case *gateway.MessageDeleteBulkEvent:
		return &MessageDeleteBulk{
			Base:                   base,
			MessageDeleteBulkEvent: src,
		}
	case *gateway.MessageReactionRemoveEmojiEvent:
		return &MessageReactionRemoveEmoji{
			Base:                            base,
			MessageReactionRemoveEmojiEvent: src,
		}
	case *gateway.RelationshipAddEvent:
		return &RelationshipAdd{
			Base:                 base,
			RelationshipAddEvent: src,
		}
	case *gateway.HelloEvent:
		return &Hello{
			Base:       base,
			HelloEvent: src,
		}
	case *gateway.ReadySupplementalEvent:
		return &ReadySupplemental{
			Base:                   base,
			ReadySupplementalEvent: src,
		}
	case *gateway.ChannelUpdateEvent:
		old, _ := h.astate.Cabinet.Channel(src.ID)
		return &ChannelUpdate{
			Base:               base,
			ChannelUpdateEvent: src,
			Old:                old,
		}
	case *gateway.GuildEmojisUpdateEvent:
		return &GuildEmojisUpdate{
			Base:                   base,
			GuildEmojisUpdateEvent: src,
		}
	case *gateway.GuildMemberListUpdate:
		return &GuildMemberListUpdate{
			Base:                  base,
			GuildMemberListUpdate: src,
		}
	case *gateway.MessageReactionAddEvent:
		return &MessageReactionAdd{
			Base:                    base,
			MessageReactionAddEvent: src,
		}
	case *gateway.ResumedEvent:
		return &Resumed{
			Base:         base,
			ResumedEvent: src,
		}
	case *gateway.GuildBanAddEvent:
		return &GuildBanAdd{
			Base:             base,
			GuildBanAddEvent: src,
		}
	case *gateway.GuildRoleUpdateEvent:
		old, _ := h.astate.Cabinet.Role(src.GuildID, src.Role.ID)
		return &GuildRoleUpdate{
			Base:                 base,
			GuildRoleUpdateEvent: src,
			Old:                  old,
		}
	case *gateway.MessageReactionRemoveAllEvent:
		return &MessageReactionRemoveAll{
			Base:                          base,
			MessageReactionRemoveAllEvent: src,
		}
	case *gateway.VoiceStateUpdateEvent:
		return &VoiceStateUpdate{
			Base:                  base,
			VoiceStateUpdateEvent: src,
		}
	case *gateway.UserGuildSettingsUpdateEvent:
		return &UserGuildSettingsUpdate{
			Base:                         base,
			UserGuildSettingsUpdateEvent: src,
		}
	case *gateway.UserUpdateEvent:
		return &UserUpdate{
			Base:            base,
			UserUpdateEvent: src,
		}
	case *gateway.GuildMemberRemoveEvent:
		old, _ := h.astate.Cabinet.Member(src.GuildID, src.User.ID)
		return &GuildMemberRemove{
			Base:                   base,
			GuildMemberRemoveEvent: src,
			Old:                    old,
		}
	case *gateway.InviteCreateEvent:
		return &InviteCreate{
			Base:              base,
			InviteCreateEvent: src,
		}
	case *gateway.InviteDeleteEvent:
		return &InviteDelete{
			Base:              base,
			InviteDeleteEvent: src,
		}
	case *gateway.MessageCreateEvent:
		return &MessageCreate{
			Base:               base,
			MessageCreateEvent: src,
		}
	case *gateway.VoiceServerUpdateEvent:
		return &VoiceServerUpdate{
			Base:                   base,
			VoiceServerUpdateEvent: src,
		}
	case *gateway.InteractionCreateEvent:
		return &InteractionCreate{
			Base:                   base,
			InteractionCreateEvent: src,
		}
	default:
		return nil
	}
}
